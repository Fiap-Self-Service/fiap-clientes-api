name: CI/CD - fiap-clientes-api

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code-analisys:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 20

    - name: Install dependencies
      run: npm install

    - name: Run Unit Tests
      run: npm test:cov

    - name: Check unit test status
      run: echo "::set-output name=test_failed::$(grep -q 'Test Suites:.*failed' ./test-results.txt && echo true || echo false)"

    - name: Stop on unit test failure
      if: ${{ steps.check_unit_test_status.outputs.test_failed == 'true' }}
      run: exit 1
    
    - name: Check Jest Unit Test Coverage
      id: coverage
      run: |
        # Recupera o percentual de cobertura do arquivo JSON gerado pelo Jest
        COVERAGE=$(cat coverage/coverage-final.json | jq .total.lines.pct)
        echo "Coverage: $COVERAGE%"
        if [ $(echo "$COVERAGE < 80" | bc) -eq 1 ]; then
          echo "Coverage deve ser maior ou igual a 80%"
          exit 1
        fi
    
    - name: Run Integration Tests
      run: npm run test:e2e

    - name: Check integration test status
      run: echo "::set-output name=test_failed::$(grep -q 'Test Suites:.*failed' ./test-results.txt && echo true || echo false)"

    - name: Stop on unit test failure
      if: ${{ steps.check_integration_test_status.outputs.test_failed == 'true' }}
      run: exit 1
  
    - name: Run BDD Tests
      run: npm run test:cucumber
    
    - name: Check Cucumber Test Results
      run: |
        FAILURES=$(cat cucumber-report.json | jq '[.elements[] | select(.status == "failed")] | length')
        echo "Number of failed tests: $FAILURES"
        
        if [ "$FAILURES" -gt 0 ]; then
          echo "Some Cucumber tests failed, failing the pipeline."
          exit 1
        fi

  # build-docker-image:
  #   runs-on: ubuntu-latest
  #   # needs: code-analisys
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Login to DockerHub
      #   run: docker login -u jacksoncarbonera -p ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Build and push Docker image
      #   run: |
      #     docker build -t jacksoncarbonera/fiap-self-service .
      #     docker push jacksoncarbonera/fiap-self-service
    
  # deploy-aws:
  #   runs-on: ubuntu-latest
  #   needs: build-docker-image
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
        
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Update kube config
  #       run: aws eks update-kubeconfig --name fiap-self-service-k8s --region us-east-1

  #     - name: Deploy to EKS
  #       run: |
  #         kubectl apply -f kubernetes/metrics  
  #         kubectl apply -f kubernetes/api 

  #     - name: Verificar Status do Deploy
  #       run: kubectl get pods