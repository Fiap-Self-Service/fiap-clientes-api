name: CI/CD - fiap-clientes-api

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code-analisys:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 20

    - name: Install dependencies
      run: npm install

    - name: Run Unit Tests
      run: npm run test:cov
    
    - name: Check Jest Unit Test Coverage
      id: coverage
      run: |
        # Recupera o arquivo de cobertura JSON gerado pelo Jest
        COVERAGE_FILE="coverage/coverage-final.json"
        
        # Inicializa variáveis para armazenar os totais de linhas e cobertas
        total_lines=0
        total_covered=0
    
        # Itera sobre cada arquivo no JSON de cobertura e soma as linhas e cobertas
        for file in $(cat $COVERAGE_FILE | jq -r 'keys[]'); do
          # Conta o total de linhas e as cobertas para cada arquivo
          file_total_lines=$(cat $COVERAGE_FILE | jq ".\"$file\".s | values | add")
          file_covered_lines=$(cat $COVERAGE_FILE | jq ".\"$file\".s | values | map(select(. > 0)) | length")
          
          # Acumula os totais de linhas e cobertas
          total_lines=$((total_lines + file_total_lines))
          total_covered=$((total_covered + file_covered_lines))
        done
    
        # Calcula a cobertura em percentual
        if [ $total_lines -eq 0 ]; then
          COVERAGE=100
        else
          COVERAGE=$(echo "scale=2; ($total_covered / $total_lines) * 100" | bc)
        fi
    
        echo "Coverage: $COVERAGE%"
    
        # Verifica se a cobertura é menor que 80% e falha no pipeline caso seja
        if [ $(echo "$COVERAGE < 80" | bc) -eq 1 ]; then
          echo "Coverage deve ser maior ou igual a 80%"
          exit 1
        fi
    
    - name: Run Integration Tests
      run: npm run test:e2e
  
    - name: Run BDD Tests
      run: npm run test:cucumber
    
  # build-docker-image:
  #   runs-on: ubuntu-latest
  #   # needs: code-analisys
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Login to DockerHub
      #   run: docker login -u jacksoncarbonera -p ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Build and push Docker image
      #   run: |
      #     docker build -t jacksoncarbonera/fiap-self-service .
      #     docker push jacksoncarbonera/fiap-self-service
    
  # deploy-aws:
  #   runs-on: ubuntu-latest
  #   needs: build-docker-image
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
        
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Update kube config
  #       run: aws eks update-kubeconfig --name fiap-self-service-k8s --region us-east-1

  #     - name: Deploy to EKS
  #       run: |
  #         kubectl apply -f kubernetes/metrics  
  #         kubectl apply -f kubernetes/api 

  #     - name: Verificar Status do Deploy
  #       run: kubectl get pods